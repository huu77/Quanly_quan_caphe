import React, { useEffect } from "react";
import Table from "./Table";
import { toast } from "react-toastify";
import { useForm } from "react-hook-form";
import { useGetAllProfileQuery, usePostCreateAccountMutation } from "@apis/slices/Account";

const numberIN = [
  { id: 1, name: "username", title: "T√™n ƒëƒÉng nh·∫≠p" },
  { id: 2, name: "password", title: "M·∫≠t kh·∫©u" },
  { id: 3, name: "lastname", title: "H·ªç" },
  { id: 4, name: "firstname", title: "T√™n" },
  { id: 5, name: "address", title: "ƒê·ªãa ch·ªâ" },
  { id: 6, name: "phone", title: "S·ªë ƒëi·ªán tho·∫°i" },
  { id: 7, name: "cccd", title: "CCCD" },
];

const role = [
  { id: 1, name: "Nh√¢n vi√™n ph·ª•c v·ª•", },
  { id: 2, name: "Nh√¢n vi√™n qu√¢ÃÄy", },

];

const Tab1 = () => {
  const showModal = () => {
    document.getElementById("modalCreateNV").showModal();
  };

  const { data } = useGetAllProfileQuery(1);

  const {
    register,
    handleSubmit,
    formState: { errors },
    reset
  } = useForm();

  const [createAccount] = usePostCreateAccountMutation();

  const onSubmit = async (formData) => {
    console.log("üöÄ ~ onSubmit ~ formData:", formData)
    try {
      const formDataWithNumberRoleId = {
        ...formData,
        role_id: Number(formData.role_id),
      };

      const response = await createAccount(formDataWithNumberRoleId).unwrap();
      console.log("Response from createAccount:", response);
      toast.success("T·∫°o nh√¢n vi√™n th√†nh c√¥ng!");
      document.getElementById("modalCreateNV").close();
      reset(); // Reset the form after successful submission
    } catch (error) {
      console.error("Failed to create account:", error);
      if (error.status === 500) {
        toast.error("L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau.");
      } else {
        toast.error("T·∫°o nh√¢n vi√™n th·∫•t b·∫°i!");
      }
    }
  };

  useEffect(() => {
    reset({
      username: "",
      password: "",
      lastname: "",
      firstname: "",
      address: "",
      phone: "",
      cccd: "",
      role_id: null
    });
  }, [reset]);

  return (
    <div className="flex flex-col gap-5">
      <div>
        <button className="btn btn-outline" onClick={showModal}>
          T·∫°o th√™m nh√¢n vi√™n
        </button>
      </div>
      <Table data={data} />
      <dialog id="modalCreateNV" className="modal">
        <div className="modal-box w-11/12 max-w-6xl">
          <div className="modal-action">
            <form method="dialog">
              <button className="btn">X</button>
            </form>
          </div>
          <form onSubmit={handleSubmit(onSubmit)}>
            <div className="grid grid-cols-2 gap-5">
              {numberIN.map((item) => (
                <div className="flex flex-col h-[100px]" key={item.id}>
                  <label className="flex items-center gap-2 font-bold">
                    {item.title ? item.title.toUpperCase() : ''}
                  </label>
                  <input
                    type="text"
                    className="border p-4 rounded"
                    placeholder={item.title}
                    {...register(item.name, { required: `${item.title} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng` })}
                  />
                  {errors[item.name] && (
                    <p className="text-red-500 text-sm">{errors[item.name].message}</p>
                  )}
                </div>
              ))}
              <div className="col-span-2">
                <select
                  className="select select-bordered w-full font-bold"
                  {...register("role_id", { required: "Role kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng" })}
                >
                  <option disabled value="">
                    Ch·ªçn role
                  </option>
                  {role.map((item) => (

                    <option value={item.id}>{item.name}</option>
                  ))}
                </select>
                {errors.role_id && (
                  <p className="text-red-500 text-sm">{errors.role_id.message}</p>
                )}
              </div>
            </div>
            <div className="mt-10">
              <button className="btn btn-outline" type="submit">T·∫°o nh√¢n vi√™n</button>
            </div>
          </form>
        </div>
      </dialog>
    </div>
  );
};

export default Tab1;
